// Generated by CoffeeScript 1.6.3
var Coffeebar, Source, beholder, coffee, exts, fs, glob, mkdirp, path, sourcemap, xcolor;

fs = require('fs');

path = require('path');

beholder = require('beholder');

coffee = require('coffee-script');

glob = require('glob');

mkdirp = require('mkdirp');

xcolor = require('xcolor');

Source = require('./source');

sourcemap = require('source-map');

exts = ['coffee', 'litcoffee', 'coffee.md'];

Coffeebar = (function() {
  function Coffeebar(inputPaths, options) {
    var _base, _base1, _base2, _base3, _base4, _base5, _base6;
    this.inputPaths = inputPaths;
    this.options = options != null ? options : {};
    this.sources = [];
    if ((_base = this.options).watch == null) {
      _base.watch = false;
    }
    if ((_base1 = this.options).silent == null) {
      _base1.silent = true;
    }
    if ((_base2 = this.options).minify == null) {
      _base2.minify = false;
    }
    if ((_base3 = this.options).extSourceMap == null) {
      _base3.extSourceMap = false;
    }
    if (this.options.minify) {
      this.options.extSourceMap = false;
    }
    if ((_base4 = this.options).sourceMap == null) {
      _base4.sourceMap = false;
    }
    if (this.options.minify) {
      this.options.sourceMap = false;
    }
    this.options.sourceMap = this.options.sourceMap || this.options.extSourceMap;
    if (this.options.output && path.extname(this.options.output)) {
      this.options.join = true;
    }
    if ((_base5 = this.options).bare == null) {
      _base5.bare = false;
    }
    if ((_base6 = this.options).header == null) {
      _base6.header = true;
    }
    this.initColors();
    this.initPaths();
    this.start();
  }

  Coffeebar.prototype.initPaths = function() {
    var i, inputPath, _i, _len, _ref, _results;
    if (!Array.isArray(this.inputPaths)) {
      this.inputPaths = [this.inputPaths];
    }
    _ref = this.inputPaths;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      inputPath = _ref[i];
      this.inputPaths[i] = inputPath = path.normalize(inputPath);
      if (!path.extname(inputPath)) {
        _results.push(this.inputPaths[i] = "" + inputPath + "/**/*.{" + exts + "}");
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Coffeebar.prototype.addSources = function() {
    var file, files, inputPath, _i, _len, _ref, _results;
    _ref = this.inputPaths;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      inputPath = _ref[_i];
      files = glob.sync(inputPath);
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
          file = files[_j];
          _results1.push(this.sources.push(new Source(this.options, file, inputPath)));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Coffeebar.prototype.start = function() {
    var i, _i, _len, _ref, _results;
    this.addSources();
    this.build();
    if (this.options.watch) {
      _ref = this.inputPaths;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(this.watch(i));
      }
      return _results;
    }
  };

  Coffeebar.prototype.build = function() {
    this.offsetSources();
    this.compileSources();
    if (this.options.sourceMap) {
      this.mapSources();
    }
    if (this.options.minify) {
      this.minifySources();
    }
    this.reportErrors();
    this.writeSources();
    if (this.options.sourceMap && this.options.join) {
      return this.writeJoinSources();
    }
  };

  Coffeebar.prototype.compileSources = function() {
    var source, _i, _len, _ref, _results;
    this.outputs = this.options.join ? this.joinSources() : this.sources;
    _ref = this.outputs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      source = _ref[_i];
      if (source.updated) {
        _results.push(source.compile());
      }
    }
    return _results;
  };

  Coffeebar.prototype.minifySources = function() {
    var source, _i, _len, _ref, _results;
    _ref = this.outputs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      source = _ref[_i];
      if (source.outputReady()) {
        _results.push(source.minify());
      }
    }
    return _results;
  };

  Coffeebar.prototype.mapSources = function() {
    var smNew, smOld, source, _i, _j, _len, _len1, _ref, _ref1,
      _this = this;
    if (!this.options.join) {
      if (!this.options.extSourceMap) {
        _ref = this.sources;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          source = _ref[_i];
          source.writeMapComment();
        }
      } else {
        _ref1 = this.sources;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          source = _ref1[_j];
          source.writeMapCommentExt();
        }
      }
      return;
    }
    if (!this.outputs[0].sourceMap) {
      return;
    }
    smOld = new sourcemap.SourceMapConsumer(this.outputs[0].sourceMap);
    smNew = new sourcemap.SourceMapGenerator({
      file: path.basename(smOld.file),
      sourceRoot: "" + (path.basename(this.options.output, '.js')) + "_mapsrc"
    });
    smOld.eachMapping(function(map) {
      return smNew.addMapping(_this.offsetMapping(map));
    });
    if (!this.options.extSourceMap) {
      return this.outputs[0].writeMapComment(smNew.toString());
    } else {
      return this.outputs[0].writeMapCommentExt(smNew.toString());
    }
  };

  Coffeebar.prototype.reportErrors = function() {
    var source, _i, _len, _ref, _results;
    if (this.options.join && this.outputs[0].error) {
      source = this.getOriginalSource(this.outputs[0].errorLine);
      this.outputs[0].errorLine = this.outputs[0].errorLine - source.offset;
      this.outputs[0].errorFile = source.file;
    }
    _ref = this.outputs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      source = _ref[_i];
      if (source.error) {
        _results.push(source.reportError());
      }
    }
    return _results;
  };

  Coffeebar.prototype.writeSources = function() {
    var source, _i, _len, _ref, _results;
    _ref = this.outputs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      source = _ref[_i];
      if (source.outputReady()) {
        _results.push(source.write());
      }
    }
    return _results;
  };

  Coffeebar.prototype.writeJoinSources = function() {
    var outputPath, source, _i, _len, _ref, _results;
    outputPath = path.join(path.dirname(this.options.output), "" + (path.basename(this.options.output, '.js')) + "_mapsrc");
    _ref = this.sources;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      source = _ref[_i];
      if (source.outputReady()) {
        _results.push(source.writeSource(outputPath));
      }
    }
    return _results;
  };

  Coffeebar.prototype.watch = function(inputPath) {
    var watcher,
      _this = this;
    watcher = beholder(inputPath);
    watcher.on('change', function(file) {
      var source;
      source = _this.getSource(file);
      source.read();
      return _this.build();
    });
    watcher.on('new', function(file) {
      _this.sources.push(new Source(_this.options, file));
      return _this.build();
    });
    return watcher.on('remove', function(file) {
      var i;
      _this.sources = (function() {
        var _i, _len, _ref, _results;
        _ref = this.sources;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.file !== file) {
            _results.push(i);
          }
        }
        return _results;
      }).call(_this);
      if (_this.options.join) {
        return _this.build();
      }
    });
  };

  Coffeebar.prototype.offsetSources = function() {
    var offset, source, _i, _len, _ref, _results;
    offset = 0;
    _ref = this.sources;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      source = _ref[_i];
      source.offset = offset;
      _results.push(offset += source.lines);
    }
    return _results;
  };

  Coffeebar.prototype.getOriginalSource = function(line) {
    var source, _i, _len, _ref;
    _ref = this.sources;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      source = _ref[_i];
      if (source.offset + source.lines > line) {
        return source;
      }
    }
  };

  Coffeebar.prototype.offsetMapping = function(map) {
    var newMap, source;
    source = this.getOriginalSource(map.originalLine - 1);
    return newMap = {
      generated: {
        line: map.generatedLine,
        column: map.generatedColumn
      },
      original: {
        line: map.originalLine - source.offset,
        column: map.originalColumn
      },
      source: source.file
    };
  };

  Coffeebar.prototype.joinSources = function() {
    var i, joinSource, joinSrc, _i, _len, _ref;
    joinSrc = "";
    _ref = this.sources;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      joinSrc = joinSrc.concat(i.src + "\n");
    }
    joinSource = new Source(this.options);
    joinSource.src = joinSrc;
    joinSource.outputPath = this.options.output;
    return [joinSource];
  };

  Coffeebar.prototype.getSource = function(file) {
    var i, _i, _len, _ref;
    _ref = this.sources;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.file === file) {
        return i;
      }
    }
  };

  Coffeebar.prototype.initColors = function() {
    xcolor.addStyle({
      coffee: 'chocolate'
    });
    xcolor.addStyle({
      boldCoffee: ['bold', 'chocolate']
    });
    return xcolor.addStyle({
      error: 'crimson'
    });
  };

  return Coffeebar;

})();

module.exports = function(inputPaths, options) {
  return new Coffeebar(inputPaths, options);
};
