// Generated by CoffeeScript 1.6.2
var Beholder, EventEmitter, async, fs, glob, minimatch, path,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

EventEmitter = require('events').EventEmitter;

fs = require('fs');

path = require('path');

async = require('async');

glob = require('glob');

minimatch = require('minimatch');

Beholder = (function(_super) {
  __extends(Beholder, _super);

  function Beholder(pattern, options, cb) {
    var _base, _base1, _base2, _base3, _base4, _ref, _ref1, _ref2, _ref3, _ref4;

    this.pattern = pattern;
    this.options = options != null ? options : {};
    this.listDir = __bind(this.listDir, this);
    this.list = __bind(this.list, this);
    this.add = __bind(this.add, this);
    this.removeAll = __bind(this.removeAll, this);
    this.remove = __bind(this.remove, this);
    this.handleError = __bind(this.handleError, this);
    this.hiddenPath = __bind(this.hiddenPath, this);
    this.invalidFile = __bind(this.invalidFile, this);
    this.swapWatchers = __bind(this.swapWatchers, this);
    this.removeWatch = __bind(this.removeWatch, this);
    this.processFile = __bind(this.processFile, this);
    this.processDir = __bind(this.processDir, this);
    this.initWatch = __bind(this.initWatch, this);
    this.addFile = __bind(this.addFile, this);
    this.processPath = __bind(this.processPath, this);
    this.walkPath = __bind(this.walkPath, this);
    this.files = [];
    this.dirs = [];
    this.patterns = [];
    this.init = true;
    if ((_ref = (_base = this.options).interval) == null) {
      _base.interval = 5007;
    }
    if ((_ref1 = (_base1 = this.options).persistent) == null) {
      _base1.persistent = true;
    }
    if ((_ref2 = (_base2 = this.options).includeHidden) == null) {
      _base2.includeHidden = false;
    }
    if ((_ref3 = (_base3 = this.options).exclude) == null) {
      _base3.exclude = [];
    }
    if ((_ref4 = (_base4 = this.options).debug) == null) {
      _base4.debug = false;
    }
    this.pollOpts = {
      interval: this.options.interval,
      persistent: this.options.persistent
    };
    this.startWatch(this.pattern, cb);
  }

  Beholder.prototype.startWatch = function(pattern, cb) {
    var _this = this;

    if (process.platform === 'win32') {
      pattern = pattern.replace(/\\/g, "/");
    }
    this.patterns.push(pattern);
    return glob(pattern, function(err, matches) {
      if (pattern.indexOf('*' !== -1)) {
        _this.addDir(pattern.replace(/\/\*.*/, ''));
      }
      return async.each(matches, _this.processPath, function(err) {
        var finish;

        if (err && cb) {
          return cb(err);
        }
        if (err) {
          return handleError(err);
        }
        _this.init = false;
        finish = function() {
          if (cb) {
            cb(null, _this);
          }
          return _this.emit('ready');
        };
        return setTimeout(finish, matches.length);
      });
    });
  };

  Beholder.prototype.walkPath = function(base) {
    var _this = this;

    return fs.stat(base, function(err, stats) {
      if (err) {
        return _this.handleError(err);
      }
      if (stats.isDirectory()) {
        _this.addDir(base);
        return fs.readdir(base, function(err, files) {
          var file, filePath, _i, _len;

          if (err) {
            return _this.handleError(err);
          }
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            filePath = path.join(base, file);
            if (process.platform === 'win32') {
              filePath = filePath.replace(/\\/g, "/");
            }
            _this.processPath(filePath, null, true);
          }
        });
      } else {
        return _this.addFile(base, stats);
      }
    });
  };

  Beholder.prototype.processPath = function(filePath, cb, descend) {
    var _this = this;

    return fs.stat(filePath, function(err, stats) {
      if (err) {
        return _this.handleError(err, true);
      }
      if (stats.isDirectory()) {
        _this.addDir(filePath);
        if (descend) {
          _this.walkPath(filePath);
        }
      } else {
        _this.addFile(filePath, stats, _this.init);
      }
      if (cb) {
        return cb();
      }
    });
  };

  Beholder.prototype.addDir = function(dirPath) {
    var i;

    if (this.hiddenPath(dirPath)) {
      return;
    }
    if (__indexOf.call((function() {
      var _i, _len, _ref, _results;

      _ref = this.dirs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(i.name);
      }
      return _results;
    }).call(this), dirPath) >= 0) {
      return;
    }
    return this.dirs.push({
      name: dirPath,
      watch: this.initWatch(dirPath, this.processDir)
    });
  };

  Beholder.prototype.addFile = function(filePath, stats, silent) {
    var i, _ref;

    if (this.invalidFile(filePath)) {
      return;
    }
    this.files.push({
      name: filePath,
      mtime: stats.mtime,
      watcher: this.initWatch(filePath, this.processFile)
    });
    if (!silent) {
      this.processFile(filePath, 'new');
    }
    if (_ref = path.dirname(filePath), __indexOf.call((function() {
      var _i, _len, _ref1, _results;

      _ref1 = this.dirs;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i = _ref1[_i];
        _results.push(i.name);
      }
      return _results;
    }).call(this), _ref) < 0) {
      return this.addDir(path.dirname(filePath));
    }
  };

  Beholder.prototype.initWatch = function(watchPath, watchFn) {
    var err,
      _this = this;

    if ((this.maxFiles != null) && this.files.length >= this.maxFiles) {
      return this.initPoll(watchPath, watchFn);
    }
    try {
      return fs.watch(path.normalize(watchPath), function(event, filename) {
        return watchFn(watchPath, event);
      });
    } catch (_error) {
      err = _error;
      if (err.code === 'EMFILE') {
        this.maxFiles = this.files.length;
        this.swapWatchers();
        return this.initPoll(watchPath, watchFn);
      } else {
        return this.handleError(err);
      }
    }
  };

  Beholder.prototype.initPoll = function(watchPath, watchFn) {
    var _this = this;

    return fs.watchFile(path.normalize(watchPath), this.pollOpts, function(curr, prev) {
      if (curr.mtime.getTime() && curr.mtime.getTime() < prev.mtime.getTime()) {
        return;
      }
      return watchFn(watchPath, 'change');
    });
  };

  Beholder.prototype.processDir = function(dir, event) {
    return this.walkPath(dir);
  };

  Beholder.prototype.processFile = function(filePath, event) {
    var file, i, _i, _len, _ref,
      _this = this;

    _ref = this.files;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.name === filePath) {
        file = i;
      }
    }
    fs.stat(filePath, function(err, stats) {
      if ((err != null ? err.code : void 0) === 'ENOENT') {
        _this.removeWatch(file);
      }
      if (err) {
        return _this.handleError(err);
      }
      if (event !== 'new' && stats.mtime.getTime() === file.mtime.getTime()) {
        return;
      }
      file.mtime = stats.mtime;
      _this.emit('any', filePath, event);
      _this.emit(event, filePath);
      _this.removeWatch(filePath, true);
      _this.addFile(filePath, stats, true);
      file = null;
      filePath = null;
      return event = null;
    });
  };

  Beholder.prototype.removeWatch = function(file, silent) {
    var i, _ref;

    if (((_ref = file.watcher) != null ? _ref.close : void 0) != null) {
      file.watcher.close();
    } else {
      fs.unwatchFile(file.name);
    }
    this.files = (function() {
      var _i, _len, _ref1, _results;

      _ref1 = this.files;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i = _ref1[_i];
        if (i.name !== file.name) {
          _results.push(i);
        }
      }
      return _results;
    }).call(this);
    this.dirs = (function() {
      var _i, _len, _ref1, _results;

      _ref1 = this.dirs;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        i = _ref1[_i];
        if (i.name !== file.name) {
          _results.push(i);
        }
      }
      return _results;
    }).call(this);
    if (!silent) {
      this.emit('remove', file.name);
    }
    if (!silent) {
      this.emit('any', file.name);
    }
    file.watcher = null;
    return file = null;
  };

  Beholder.prototype.swapWatchers = function() {
    var file, index, _i, _len, _ref;

    _ref = this.files;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      file = _ref[index];
      if (!(index > this.maxFiles - 25)) {
        continue;
      }
      if (file.watcher.close) {
        file.watcher.close();
      }
      file.watcher = null;
      file.watcher = this.initPoll(file.name, this.processFile);
    }
  };

  Beholder.prototype.invalidFile = function(filePath) {
    var i, _i, _len, _ref;

    if (this.hiddenPath(filePath)) {
      return true;
    }
    if (__indexOf.call((function() {
      var _i, _len, _ref, _results;

      _ref = this.files;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(i.name);
      }
      return _results;
    }).call(this), filePath) >= 0) {
      return true;
    }
    if (!this.patternMatch(filePath)) {
      return true;
    }
    _ref = this.options.exclude;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (minimatch(filePath, i)) {
        return true;
      }
    }
    return false;
  };

  Beholder.prototype.patternMatch = function(filePath) {
    var pattern, _i, _len, _ref;

    _ref = this.patterns;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pattern = _ref[_i];
      if (minimatch(filePath, pattern)) {
        return true;
      }
    }
    return false;
  };

  Beholder.prototype.hiddenPath = function(filePath) {
    return path.basename(filePath)[0] === '.' && !this.options.includeHidden;
  };

  Beholder.prototype.handleError = function(error) {
    if (this.options.debug) {
      console.log(error);
    }
    if (error.code === 'ENOENT') {
      return error;
    }
    this.emit('error', error);
    return error;
  };

  Beholder.prototype.remove = function(filePath, silent) {
    var file, i, _i, _j, _len, _len1, _ref, _ref1;

    _ref = this.files;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.name === filePath) {
        file = i;
      }
    }
    if (!file) {
      _ref1 = this.dirs;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        i = _ref1[_j];
        if (i.name === filePath) {
          file = i;
        }
      }
    }
    if (!file) {
      return console.log(new Error("File not found"));
    }
    return this.removeWatch(file, silent);
  };

  Beholder.prototype.removeAll = function(silent) {
    var file, _i, _len, _ref;

    _ref = this.files;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      this.removeWatch(file, silent);
    }
  };

  Beholder.prototype.add = function(pattern, cb) {
    return this.startWatch(pattern, cb);
  };

  Beholder.prototype.list = function() {
    var i, _i, _len, _ref, _results;

    _ref = this.files;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _results.push(i.name);
    }
    return _results;
  };

  Beholder.prototype.listDir = function() {
    var i, _i, _len, _ref, _results;

    _ref = this.dirs;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _results.push(i.name);
    }
    return _results;
  };

  return Beholder;

})(EventEmitter);

module.exports = function(pattern, options, cb) {
  if (!cb && typeof options === 'function') {
    cb = options;
    options = {};
  }
  return new Beholder(pattern, options, cb);
};
